{"version":3,"sources":["Switch.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Switch","label","isOn","handleToggle","className","htmlFor","checked","onChange","id","type","style","background","App","useState","cascade","setCascade","onColor","Subject","socket","io","sendColor","rgb","emit","useEffect","subscription","pipe","throttleTime","subscribe","unsubscribe","onClick","fetch","method","then","res","console","log","width","color","next","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gWAyBeA,G,OAtBA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAC5B,OACE,oCACE,2BAAOC,UAAU,iBAAiBC,QAAO,yBAA4BJ,GACrE,2BACEK,QAASJ,EACTK,SAAUJ,EACVC,UAAU,wBACVI,GAAE,mBACFC,KAAK,aAEP,2BACEC,MAAO,CAACC,WAAYT,GAAQ,WAC5BE,UAAU,qBACVC,QAAO,oBAEP,0BAAMD,UAAS,4B,8NC4BRQ,MAvCf,WAAgB,IAAD,EAEiBC,oBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,KAIPC,EAAU,IAAIC,IACdC,EAASC,MAETC,EAAY,SAAAC,GAChBH,EAAOI,KAAK,Q,yVAAZ,IAAyBD,EAAzB,CAA8BP,cAgBhC,OAPAS,qBAAU,WACR,IAAMC,EAAeR,EAAQS,KAC3BC,YAAa,KACbC,UAAUP,GACZ,OAAO,kBAAMI,EAAaI,kBAI1B,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,sBACb,6BACE,yBAAKA,UAAU,YACb,4BAAQA,UAAU,kBAAkByB,QAlB1B,WAClBC,MAAM,WAAY,CAChBC,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAenB,WACA,kBAAC,EAAD,CAAQhC,MAAM,UAAUC,KAAMY,EAASX,aAAc,kBAAMY,GAAYD,OAEzE,kBAAC,eAAD,CAAcsB,MAAO,IAAK7B,SAAU,SAAA8B,GAAK,OAAIrB,EAAQsB,KAAKD,EAAMhB,YC5BtDkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.06be3813.chunk.js","sourcesContent":["import React from 'react';\nimport \"./css/Switch.css\";\n\nconst Switch = ({label, isOn, handleToggle}) => {\n  return (\n    <>\n      <label className=\"checkbox-label\" htmlFor={`react-switch-checkbox`}>{label}</label>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className=\"react-switch-checkbox\"\n        id={`react-switch-new`}\n        type=\"checkbox\"\n      />\n      <label\n        style={{background: isOn && '#06D6A0'}}\n        className=\"react-switch-label\"\n        htmlFor={`react-switch-new`}\n      >\n        <span className={`react-switch-button`}/>\n      </label>\n    </>\n  )\n};\n\nexport default Switch;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { SketchPicker } from \"react-color\";\nimport { Subject } from \"rxjs\";\nimport { throttleTime } from \"rxjs/operators\";\nimport io from \"socket.io-client\";\nimport Switch from \"./Switch\";\n\nfunction App() {\n\n  const [cascade, setCascade] = useState(false);\n\n  const onColor = new Subject();\n  const socket = io();\n\n  const sendColor = rgb => {\n    socket.emit('color', {...rgb, cascade});\n  };\n\n  const sendRainbow = () => {\n    fetch(\"/rainbow\", {\n      method: \"GET\"\n    }).then(res => console.log(res))\n  };\n\n  useEffect(() => {\n    const subscription = onColor.pipe(\n      throttleTime(50)\n    ).subscribe(sendColor);\n    return () => subscription.unsubscribe();\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"centered-container\">\n        <div>\n          <div className=\"settings\">\n            <button className=\"btn btn-rainbow\" onClick={sendRainbow}>Rainbow</button>\n            <Switch label=\"Cascade\" isOn={cascade} handleToggle={() => setCascade(!cascade)}/>\n          </div>\n          <SketchPicker width={300} onChange={color => onColor.next(color.rgb)}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}